import React from 'react'
import openSocket from 'socket.io-client'
import { View, Text, Button } from 'react-native'
const PushNotification = require('react-native-push-notification')
const socket = openSocket('http://192.168.1.62:4000')

// Need to eject before adding notifications?

// PushNotification.configure({
//     onRegister: function(token) {
//         console.log('------------ token', token)
//     },

//     onNotification: function(notification) {
//         console.log('------------ notification', notification)
//         notification.finish(PushNotification.FetchResult.NoData)
//     },

//     permissions: {
//         alert: true,
//         badge: true,
//         sound: true
//     },

//     popInitialNotification: true,

//     requestPermissions: true
// })


class SocketTesting extends React.Component {
    constructor() {
        super()
        this.state = {
            messages: []
        }
    }

    componentDidMount() {
        console.log('------------ SocketTesting has mounted', socket)
        socket.on('message', (message) => {
            console.log('------------ message', message)
            let newArr = [...this.state.messages, message[0]]
            this.setState({ messages: newArr })
        })
    }

    sayHiToServer = () => {
        socket.emit('greeting', 'Hello there server')
        // Need to eject before adding notifications?
        
        // PushNotification.localNotification({
        //     /* Android Only Properties */
        //     id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        //     ticker: "My Notification Ticker", // (optional)
        //     autoCancel: true, // (optional) default: true
        //     largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
        //     smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
        //     bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
        //     subText: "This is a subText", // (optional) default: none
        //     color: "red", // (optional) default: system default
        //     vibrate: true, // (optional) default: true
        //     vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        //     tag: 'some_tag', // (optional) add tag to message
        //     group: "group", // (optional) add group to message
        //     ongoing: false, // (optional) set whether this is an "ongoing" notification
        //     priority: "high", // (optional) set notification priority, default: high
        //     visibility: "private", // (optional) set notification visibility, default: private
        //     importance: "high", // (optional) set notification importance, default: high

        //     /* iOS and Android properties */
        //     title: "My Notification Title", // (optional)
        //     message: "My Notification Message", // (required)
        //     playSound: false, // (optional) default: true
        //     soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        //     number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        //     repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
        //     actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
        // });
    }

    render() {
        const chats = this.state.messages.map(message => <Text key={message.createdAt}>{message.text}</Text>)
        console.log('------------ state', this.state)
        return(
            <View>
                {chats}
                <Button onPress={this.sayHiToServer} title='Say hi to server' />
            </View>
        )
    }
}

export default SocketTesting